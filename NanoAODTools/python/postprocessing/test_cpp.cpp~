#include "ROOT/RDataFrame.hxx"
#include "ROOT/RVec.hxx"
#include "TCanvas.h"
#include "TH1D.h"
#include "TFile.h"
#include "TH2D.h"
#include "TLatex.h"
#include "Math/Vector4D.h"
#include "TStyle.h"
#include <map>

#include "TDavixFile.h"

using namespace ROOT::VecOps;
using RNode = ROOT::RDF::RNode;
using rvec_f = const RVec<float> &;
using rvec_i = const RVec<int> &;
using rvec_b = const RVec<bool> &;

RVec<RVec<int>> findTopClusters(rvec_f TopMixed_TopScore, rvec_f TopMixed_idxFatJet, rvec_f TopMixed_idxJet0, rvec_f TopMixed_idxJet1, rvec_f TopMixed_idxJet2)
{
  RVec<RVec<int>> clusters;
  const RVec<int> scores_indices_ = Argsort(TopMixed_TopScore);
  RVec<int> scores_indices = Reverse(scores_indices_);
  RVec<int> tmp;
  for(int i = 0; i < TopMixed_TopScore.size(); i++)
    {
      tmp.emplace_back(i);
    }
  RVec<int> ids_sorted = Take(tmp, scores_indices);
  
  // ids_sorted is the list of indices of tops sorted by score we need to loop
  RVec<int> survived_top = ids_sorted;
  while(survived_top.size()!=0)
    {
      int fixedtop = survived_top[0];
      RVec<int> cluster;
      cluster.emplace_back(fixedtop);
      RVec<int> tokeep;
      for(int i = 1; i < survived_top.size(); i++)
	{
	  if(check_same_top(TopMixed_idxFatJet[fixedtop], TopMixed_idxJet0[fixedtop], TopMixed_idxJet1[fixedtop], TopMixed_idxJet2[fixedtop], TopMixed_idxFatJet[survived_top[i]], TopMixed_idxJet0[survived_top[i]], TopMixed_idxJet1[survived_top[i]], TopMixed_idxJet2[survived_top[i]]))
	    {
	      cluster.emplace_back(survived_top[i]);
	    }
	  else
	    {
	      tokeep.emplace_back(survived_top[i]);
	    }
	  survived_top = Take(survived_top, tokeep);
	  clusters.emplace_back(cluster);
	}
    }
  return clusters;
}

bool check_same_top(int idx_fj_1, int idx_j0_1, int idx_j1_1, int idx_j2_1, int idx_fj_2, int idx_j0_2, int idx_j1_2, int idx_j2_2)
{
  std::vector<int> list_1 = {idx_j0_1, idx_j1_1, idx_j2_1};
  std::vector<int> list_2 = {idx_j0_2, idx_j1_2, idx_j2_2};
  
  // Remove elements equal to -1
  list_1.erase(std::remove(list_1.begin(), list_1.end(), -1), list_1.end());
  list_2.erase(std::remove(list_2.begin(), list_2.end(), -1), list_2.end());
  
  std::set<int> set_1(list_1.begin(), list_1.end());
  std::set<int> set_2(list_2.begin(), list_2.end());
  
  std::set<int> intersection;
  std::set_intersection(set_1.begin(), set_1.end(), set_2.begin(), set_2.end(), std::inserter(intersection, intersection.begin()));
  
  bool check_jets = intersection.empty();
  bool check_fj = (idx_fj_1 != idx_fj_2)||(idx_fj_1 == -1 || idx_fj_2 == -1);
  
  return check_jets && check_fj;
}

int main(){
  RVec<float> TopMixed_TopScore{1.649e-06, 2.093e-06, 0.3998666, 9.586e-06, 5.312e-06, 0.0025239, 8.806e-07, 5.375e-07, 2.612e-07, 0.0008065, 1.634e-06, 3.523e-06, 0.0076130, 8.395e-08, 2.359e-08, 1.016e-07, 0.0001780, 0.0002937, 0.0001266, 0.0005225, 0.0001247, 0.0006348, 6.454e-07, 0.0004500};
  RVec<int> TopMixed_idxFatJet{0, 1, 0, 1, 0, 1,-1, 0, 1, 0, 1, 0, 1,-1, 0, 1, 0, 1,-1, 0, 1,-1, 0, 1};
  RVec<int> TopMixed_idxJet0{1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3};
  RVec<int> TopMixed_idxJet1{0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2};
  RVec<int> TopMixed_idxJet2{-1, -1, -1, -1, -1, -1,  0,  0,  0, -1, -1, -1, -1,  0,  0,  0, -1, -1,  0,  0,  0,  1,  1,  1};
    
  auto res= findTopCluster(TopMixed_TopScore,TopMixed_idxFatJet, TopMixed_idxJet0, TopMixed_idxJet1, TopMixed_idxJet2);
  cout<<res<<endl;
    
  return 0;
}


